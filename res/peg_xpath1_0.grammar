/*
    An XPath 1.0 grammar derived from the XPath 1.0 Specification:
 
    http://www.w3.org/TR/xpath
    


    NOTE-TO-SELF: to avoid infinite recursion, I had to eliminate this production:
    
        abbreviatedRelativeLocationPath = relativeLocationPath '//' step;
    
    and therefore remove `abbreviatedRelativeLocationPath` from `relativeLocationPath` which changed from
        
        relativeLocationPath = step ('/' step)* | abbreviatedRelativeLocationPath;
        
    to:
    
        relativeLocationPath = step ('/' step)* ('//' step)?;
    
    
    AND functionName should be:

        functionName = qName - nodeType - booleanLiteral;
*/

@before {
        // TODO `$`

        PKTokenizer *t = self.tokenizer;
        [t.symbolState add:@"//"];
        [t.symbolState add:@".."];
        [t.symbolState add:@"!="];
        [t.symbolState add:@"::"];
        [t.symbolState add:@"<="];
        [t.symbolState add:@"=>"];

        [t setTokenizerState:t.wordState from:'_' to:'_'];
        [t.wordState setWordChars:YES from:'-' to:'-'];
        [t.wordState setWordChars:YES from:'_' to:'_'];
        [t.wordState setWordChars:YES from:'.' to:'.'];
        [t.wordState setWordChars:NO from:'\\'' to:'\\''];

        [t setTokenizerState:t.numberState from:'.' to:'.'];

        [t setTokenizerState:t.numberState from:'#' to:'#'];
        t.numberState.allowsScientificNotation = NO;

        [t setTokenizerState:t.symbolState from:'/' to:'/'];
}

stmt = expr;
expr = orExpr;
    orExpr = andExpr orAndExpr*;
        orAndExpr = ('or' andExpr);
        andExpr = equalityExpr andEqualityExpr*;
            andEqualityExpr = ('and' equalityExpr);

            equalityExpr = relationalExpr eqRelationalExpr*;
                eqRelationalExpr = ('=' | '!=') relationalExpr;

                relationalExpr = additiveExpr compareAdditiveExpr*;
                    compareAdditiveExpr = ('<' | '>' | '<=' | '>=') additiveExpr;
                    
                    additiveExpr = multiplicativeExpr plusOrMinusMultiExpr*;
                        plusOrMinusMultiExpr  = (('+' | '-') multiplicativeExpr);
                    
                        multiplicativeExpr = unaryExpr multDivOrModUnaryExpr*;
                            multDivOrModUnaryExpr = ((multiplyOperator | 'div' | 'mod') unaryExpr);
                            
                            multiplyOperator = '*';
                            unaryExpr = minusUnionExpr | unionExpr;
                                minusUnionExpr = '-'+ unionExpr;
                                unionExpr = pathExpr ('|' pathExpr)*;
    

pathExpr = filterExpr (('/' | '//') relativeLocationPath)? | locationPath;
    locationPath = relativeLocationPath | absoluteLocationPath;
        relativeLocationPath = step (('/' | '//') step)*;
        absoluteLocationPath = '/' relativeLocationPath? | abbreviatedAbsoluteLocationPath;
            abbreviatedAbsoluteLocationPath = '//' relativeLocationPath;

    filterExpr = primaryExpr predicate*;
        primaryExpr = variableReference | literal | number | functionCall | '(' expr ')';
            variableReference = '$' qName; // note whitespace is not allowed here. also qName is optional
            literal = QuotedString;
            number = Number;
            functionCall = actualFunctionCall | booleanLiteralFunctionCall;
                actualFunctionCall = functionName '(' (argument (','! argument)* )? ')'!;
                booleanLiteralFunctionCall = booleanLiteral '('! ')'!;
                    functionName = { NE(LS(1), @"true") && NE(LS(1), @"false") && NE(LS(1), @"comment") && NE(LS(1), @"text") && NE(LS(1), @"processing-instruction") && NE(LS(1), @"node") }? qName;
                    booleanLiteral = 'true' | 'false';
                
                    qName = (prefix ':')? localPart;
                        prefix = ncName;
                        localPart = ncName;
                            ncName = Word;
                argument = expr;
        predicate = '['! predicateExpr ']'!;
            predicateExpr = expr;
                

    step = explicitAxisStep | abbreviatedStep | implicitAxisStep;
        explicitAxisStep = axis stepBody;
        implicitAxisStep = stepBody;
        
        axis = axisName '::'! | abbreviatedAxis;
            axisName = 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child' | 'descendant' | 'descendant-or-self' | 'following' | 'following-sibling' | 'namespace' | 'parent' | 'preceding' | 'preceding-sibling' | 'self';
            abbreviatedAxis = '@'!;
        stepBody = nodeTest predicate*;
        nodeTest = nameTest | typeTest | 'processing-instruction' '(' literal ')';
            nameTest = '*' | ncName ':' '*' | qName; // note whitespace should not be allowed in second alt here
            typeTest = nodeType '('! ')'!;
            nodeType = 'comment' | 'text' | 'processing-instruction' | 'node';
        abbreviatedStep = '.' | '..';
            
